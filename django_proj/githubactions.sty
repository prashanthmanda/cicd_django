To deploy your Django project to an AWS EC2 instance using GitHub Actions, you need to set up a CI/CD pipeline that automates the deployment process. The general steps to achieve this are as follows:

1. Set Up AWS EC2 Instance
Ensure that your EC2 instance is running Ubuntu, and you have:

SSH access to your EC2 instance (you'll need the SSH key pair).
Python and other dependencies (like git, nginx, postgresql, etc.) installed on the EC2 instance.
2. Prepare Your Django Project for Deployment
Before deploying, make sure:

Your Django settings are configured for production (like ALLOWED_HOSTS, DATABASES, etc.).
You are using environment variables for sensitive information like your AWS database credentials, secret keys, etc.
You have gunicorn and nginx configured for serving the app.
3. Set Up GitHub Repository Secrets
You'll need to configure the necessary secrets in your GitHub repository for security reasons:

SSH Private Key: This key allows GitHub Actions to SSH into your EC2 instance.
AWS Credentials: Set up your AWS access keys to interact with AWS services (for creating infrastructure, if needed).
PostgreSQL Credentials: Set up your database credentials in environment variables.
To add secrets to your GitHub repository:

Go to your GitHub repository.
Navigate to Settings > Secrets > New repository secret.
Add secrets like EC2_SSH_PRIVATE_KEY, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.
4. Create GitHub Actions Workflow File
You’ll create a GitHub Actions workflow file to define the deployment pipeline.

Create .github/workflows/deploy.yml in your project repository.
Here’s a sample GitHub Actions workflow (deploy.yml):

yaml
Copy
name: Deploy Django App to EC2

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Use your AWS region

      - name: Deploy to EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            cd /path/to/your/django/project  # Make sure to update this path
            git pull origin main  # Pull the latest changes
            source /path/to/virtualenv/bin/activate  # Activate virtual environment
            pip install -r requirements.txt  # Install any new dependencies
            python manage.py migrate  # Run migrations
            python manage.py collectstatic --noinput  # Collect static files
            sudo systemctl restart gunicorn  # Restart the gunicorn service
            sudo systemctl restart nginx  # Restart nginx (if you use nginx as a reverse proxy)
          EOF
5. Explanation of the Workflow
Trigger: The workflow triggers when changes are pushed to the main branch.
Checkout: It checks out the latest code from your repository.
Set up SSH: The action webfactory/ssh-agent is used to set up SSH access to your EC2 instance using the private key stored in the GitHub secret EC2_SSH_PRIVATE_KEY.
Python Setup: Sets up the Python environment and installs dependencies from requirements.txt.
AWS Setup: Configures AWS credentials (optional if you need AWS resources in your workflow).
Deploy Steps:
SSH into your EC2 instance.
Pull the latest changes from your GitHub repository.
Set up your virtual environment, install any required dependencies, run migrations, collect static files, and restart services (gunicorn and nginx).
6. Configure Your EC2 Instance
Before deploying, ensure your EC2 instance is properly configured:

SSH should be enabled, and your private key should be in the GitHub secrets.
Ensure that your EC2 instance has an installed and running web server like nginx, and a WSGI server like gunicorn.
Set up a virtual environment for Python dependencies and activate it before deploying.
7. Commit and Push Changes
Push the .github/workflows/deploy.yml to your repository.

bash
Copy
git add .github/workflows/deploy.yml
git commit -m "Add GitHub Actions deployment workflow"
git push origin main
8. Test the Deployment
Once you push the changes to the main branch, GitHub Actions will automatically run the deployment pipeline. You can monitor the deployment by going to the Actions tab in your GitHub repository.

If everything is set up correctly, your Django project will be deployed to the EC2 instance after every push to the main branch!

Let me know if you need any further assistance with this!


sudo apt update
sudo apt install python3
sudo apt install python3-venv
git clone